# .github/workflows/ci-sonar-coverage.yml
name: Build, Test & SonarCloud Analyze

on:
  push:
    branches:
      - main

jobs:
  build-and-analyze:
    name: Build, Test & SonarCloud (EonWatchesAPI)
    runs-on: windows-latest

    steps:
      # 1) Check out the repository
      - uses: actions/checkout@v4

      # 2) Install .NET 8 SDK
      - name: Set up .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3) Install SonarCloud Scanner
      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      # 4) Begin SonarCloud analysis (only EonWatchesAPI, points to coverage file)
      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner begin /k:"ThomasvanOtterloo_Afstudeerstage_2TCI" /o:"mysonarcloudtester" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.sources="EonWatchesAPI" /d:sonar.cs.opencover.reportsPaths="coverage/OpenCover.xml"

      # 5) Restore all projects
      - name: Restore dependencies
        run: dotnet restore

      # 6) Build the entire solution in Release mode
      - name: Build solution
        run: dotnet build EonWatchesAPI.sln --configuration Release

      # 7) Run unit tests and collect coverage via Coverlet
      - name: Run tests and collect coverage
        run: dotnet test EonWatchesAPI.sln --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage/OpenCover.xml

      # 8) End SonarCloud analysis (imports coverage data)
      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
